/* Trie.js
 * A simple Trie implementation written in JS, with robust built in functions for managing strings
 * Licensed under the MIT licence
 * Created by Gurudayal Khalsa
*/
function Trie(wordlist){var trie={};var endString="|";this.getObject=function(string){if(!string)return trie;var charsDone="";var currentObj=trie;for(var i in string){var char=string[i];if(currentObj[char])currentObj=currentObj[char];else return false}if(currentObj!==trie){return currentObj}return false};this.get=function(string){if(typeof string==="object"){var strings={};for(var i in string)strings[string[i]]=this.get(string[i]);return strings}if(typeof string!=="string"&&string===undefined)return[];var currentObj=this.getObject(string);if(typeof string==="string"&&!currentObj)return[];currentObj=currentObj||trie;var strings=[];function findAllRecursive(currentObj){if(currentObj[endString]&&!strings[currentObj[endString]])strings.push(currentObj[endString]);if(hasChildrenObjects(currentObj))for(var i in childrenObjects(currentObj))findAllRecursive(currentObj[i]);else return}findAllRecursive(currentObj);return strings};this.insert=function(string){if(typeof string==="object"){for(var i in string)this.insert(string[i]);return true}if(typeof string!=="string")return false;var charsDone="";var currentObj=trie;for(var i in string){var char=string[i];if(!currentObj[char]&&charsDone!==string)currentObj[char]={};charsDone+=char;if(charsDone===string){currentObj[char][endString]=string}currentObj=currentObj[char]}return true};this.remove=function(string,all){if(typeof string==="object"){for(var i in string)this.remove(string[i]);return true}if(typeof string!=="string")return false;var all=all||false;var currentObj=this.getObject(string);if(typeof string==="string"&&this.getObject(string)===false||!this.has(string)&&all===false&&currentObj[endString]!==string)return false;if(currentObj[endString]&&currentObj[endString]===string)delete currentObj[endString];var currentParent=parent(currentObj,string,trie);if(!this.has(string)&&all===true&&currentParent[string]){delete currentParent[string];return true}else if(all===false)return false;if(hasChildrenObjects(currentObj)){if(all===true)for(var i in currentObj)delete currentObj[i];if(childrenLength(currentParent)===1&&currentParent[string[string.length-1]])return true}for(var i=string.length-1;i>=0;i--){var char=string[i];var currentParent=parent(currentObj,string,trie);if(childrenLength(currentParent)>=1&&currentParent[char]){delete currentParent[char];if(childrenLength(currentParent)>=1)return true}currentObj=currentParent}return true};this.has=function(string){if(typeof string==="object"){var strings={};for(var i in string)strings[string[i]]=this.has(string[i]);return strings}if(typeof string!=="string")return false;var arr=this.getObject(string);if(typeof string==="string"&&!arr)return false;if(arr[endString]&&arr[endString]===string)return true;return false};this.insert(wordlist);function hasChildrenObjects(obj){if(obj.length===0)return false;for(var i in obj)if(typeof obj[i]==="object")return true;return false}function childrenObjects(obj){var objects={};for(var i in obj){if(obj[i]!==endString)objects[i]=obj[i]}return objects}function childrenLength(obj){var count=0;for(var i in obj){count++}return count}function parent(obj,string,root){var charsDone="";var currentObj=root;var pastObjects=[];for(var i in string){var char=string[i];if(currentObj[char]){pastObjects.push(currentObj);currentObj=currentObj[char]}else return false;if(currentObj===obj)return pastObjects.pop()}}function copy(obj){return JSON.parse(JSON.stringify(obj))}}